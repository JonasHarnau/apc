import unittest
import numpy as np
import apc

class TestFit(unittest.TestCase):

    def test_TA_odp(self):
        model = apc.Model()
        model.data_from_df(apc.loss_TA(), data_format='CL')
        model.fit(family='od_poisson_response', predictor='AC')
        
        self.assertEqual(round(model.deviance,3), 1903014.004)
        self.assertTrue(np.allclose(
            model.para_table['P>|t|'].values,
            np.array([
                np.nan,   3.50394713e-09,   1.65458672e-02,
        1.35749045e-04,   9.20260458e-01,   8.11965018e-03,
        4.67631895e-01,   5.17889796e-01,   5.58375527e-01,
        2.35466770e-01,   1.08695074e-01,   1.67254401e-01,
        9.84463128e-01,   7.89979049e-01,   6.32105935e-01,
        8.62556947e-01,   7.99177515e-01,   3.19345261e-01,
        9.21765023e-01
            ]), 
            equal_nan=True)
                       )
        self.assertEqual(round(model.fitted_values.sum(),3), 34358090.000)
        
    def test_asbestos(self):
        model = apc.Model()
        model.data_from_df(apc.asbestos(), data_format='PA')
        model.fit(family='poisson_response', predictor='AC')
        
        self.assertEqual(round(model.deviance,3), 2599.565)
        self.assertTrue(np.allclose(
            model.para_table['P>|z|'].values,
            np.array([           
                np.nan, 1.79069451e-01, 1.57848066e-01, 5.34769740e-01,
                9.60099613e-01, 3.26608478e-01, 7.29596870e-01, 9.98386286e-01,
                8.50816836e-01, 7.33913191e-01, 7.26696444e-01, 6.26162396e-01,
                4.40989572e-01, 9.44089942e-01, 6.12847937e-01, 7.19255538e-01,
                3.92288655e-01, 4.82019988e-01, 7.74166187e-01, 6.90166005e-01,
                9.49224661e-01, 1.67006158e-01, 3.19209109e-02, 1.04678376e-01,
                7.36056116e-01, 3.86610700e-01, 1.74339041e-01, 8.14291292e-01,
                5.83732138e-01, 9.07714180e-01, 8.46741545e-01, 8.76331848e-01,
                6.29273488e-01, 5.53576134e-01, 7.48865091e-01, 2.72233350e-01,
                3.34128567e-01, 5.89123240e-01, 3.37274357e-01, 2.43737492e-01,
                2.39495144e-01, 2.03120922e-01, 9.60012422e-01, 1.49175000e-02,
                7.55094919e-03, 5.27316604e-01, 7.08284631e-01, 9.18315319e-01,
                9.19222592e-01, 5.11836129e-01, 4.95051863e-01, 9.79474030e-01,
                3.40793391e-01, 1.71300254e-01, 9.66925437e-02, 4.37330289e-01,
                6.57759533e-01, 5.59205554e-01, 9.58624645e-01, 6.83531815e-01,
                9.41815516e-01, 5.10664609e-01, 8.71843661e-01, 4.82533173e-01,
                8.49460082e-01, 8.00034004e-01, 6.72698480e-01, 7.16766341e-01,
                8.50173670e-01, 7.64393667e-01, 7.03707928e-01, 9.99999765e-01,
                9.99999777e-01, 9.99999820e-01, 9.99844282e-01, 9.99453557e-01,
                9.99578115e-01, 9.99591762e-01, 7.24741930e-01, 7.19236322e-01,
                2.44816393e-01, 8.12444808e-02, 6.03790138e-01, 9.95923680e-01,
                2.90572897e-01, 4.56290685e-02, 3.74687754e-01, 4.27283774e-01,
                2.40672239e-01, 5.12867721e-01, 9.64895523e-01, 7.71387374e-01,
                4.99430632e-01, 5.66248140e-01, 9.59135567e-01, 9.22512898e-01,
                4.79421134e-01, 6.30468364e-02, 5.50482592e-03, 2.00475867e-02,
                1.12983709e-01, 7.92253940e-01, 8.03845941e-01, 1.91004225e-01,
                2.84769453e-01, 7.43803836e-01, 3.44643195e-01, 2.47650599e-01,
                7.79108804e-01, 7.35616753e-01, 4.25711459e-01, 6.73902530e-01,
                2.50523892e-01, 8.64173511e-01, 9.24567753e-01, 1.42954233e-01,
                1.40584014e-03, 9.26109319e-07, 9.94896481e-01, 7.88390181e-01,
                6.98502213e-01, 9.66186194e-01, 5.10588581e-01, 3.10778149e-01,
                9.63011403e-02, 4.09888056e-01, 7.37517988e-01, 9.83022337e-01,
                2.26690059e-01, 6.24888005e-01, 5.04005721e-01, 8.29073816e-01,
                5.51623154e-01, 6.36439364e-01, 3.37999231e-01, 1.57370885e-01,
                9.57182444e-01, 9.92286980e-01, 3.05005370e-01, 6.19740753e-01,
                4.26578171e-01, 9.97650062e-01, 9.55888194e-01, 6.42721038e-02,
                1.18083693e-01, 6.05469833e-02, 7.98534715e-01, 4.03185255e-01,
                9.14630614e-01, 7.73957625e-01, 2.62669673e-01, 1.85157037e-01,
                5.45565868e-01, 4.72458638e-01, 2.17326248e-01, 5.22658276e-01,
                6.20192354e-01, 2.98938743e-01, 4.88897187e-01, 3.72611617e-01,
                1.25445704e-02, 2.45291163e-01, 6.15915291e-01, 9.99297751e-01,
                9.99317913e-01, 9.99287168e-01, 8.27191210e-01, 7.59766471e-01,
                6.47095071e-01, 2.18562125e-01, 9.99554572e-01, 9.99793679e-01,
                9.99999349e-01, 9.99999807e-01, 9.99999939e-01, 9.99999895e-01,
                9.99998578e-01, 9.99868376e-01, 9.99710332e-01
            ]), 
            equal_nan=True)
                       )
        self.assertEqual(model.fitted_values.sum().astype(int), 
                         model.data_vector.sum()[0])
        
    def test_Belgian_ln_rates(self):
        model = apc.Model()
        model.data_from_df(**apc.Belgian_lung_cancer())
        model.fit(family='log_normal_rates', predictor='APC')
        
        self.assertEqual(round(model.deviance,3), -44.854)
        self.assertTrue(np.allclose(
            model.para_table['P>|z|'].values,
            np.array([
         2.09331128e-29,   6.16131902e-03,   3.39144271e-01,
         4.89205018e-02,   4.80568185e-01,   5.47475298e-01,
         4.81296622e-01,   8.34983934e-01,   7.87164891e-01,
         9.23124206e-01,   8.14693970e-01,   7.79825603e-01,
         6.05257510e-01,   9.31722939e-01,   8.14136002e-01,
         8.94116268e-01,   9.15473641e-01,   8.20280965e-01,
         7.58593410e-01,   9.41457948e-01,   7.82681623e-01,
         6.56188983e-01,   7.63893913e-01,   1.68388206e-01,
         2.88748761e-02,   1.43842965e-02
            ]), 
            equal_nan=True)
                       )
        self.assertEqual(round(model.fitted_values.sum(),3), 552.365)
        
    def test_Belgian_bin_dose_response(self):
        data = apc.Belgian_lung_cancer()
        dose = (data['response']/data['rate'] * 10**5).astype(int)
        model = apc.Model()
        model.data_from_df(data['response'], dose=dose, data_format='AP')
        model.fit('binomial_dose_response', 'APC')
        
        self.assertEqual(round(model.deviance,3), 20.227)
        self.assertTrue(np.allclose(
            model.para_table['P>|z|'].values,
            np.array([
                0.00000000e+00, 2.00519896e-11, 7.54361666e-02, 2.44877022e-01,
                3.78623439e-01, 4.49629054e-01, 1.71917810e-01, 7.15130617e-01,
                3.40413299e-01, 7.77302417e-01, 5.43443319e-01, 3.10193656e-01,
                3.27424287e-01, 3.02341523e-01, 4.90543748e-01, 8.10861452e-01,
                8.99103558e-01, 2.56217693e-01, 4.15956680e-01, 9.55997597e-01,
                9.06788804e-01, 5.55305952e-01, 3.42810478e-01, 4.50703994e-01,
                7.13277567e-01, 4.54607683e-01
            ]), 
            equal_nan=True)
                       )
        self.assertEqual(round(model.fitted_values.sum(),10), 0.0055324403)
        
if __name__ == '__main__':
    unittest.main()